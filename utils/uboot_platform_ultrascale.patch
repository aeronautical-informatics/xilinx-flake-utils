--- ./project-spec/meta-user/recipes-bsp/u-boot/files/platform-top.h.original	2023-09-07 11:36:26.676383053 +0200
+++ ./project-spec/meta-user/recipes-bsp/u-boot/files/platform-top.h	2023-09-08 13:45:21.627253576 +0200
@@ -22,3 +22,86 @@
 #undef CONFIG_DEBUG_UART
 #endif
 #endif
+
+// Boot Process
+#define CONFIG_BOOTDELAY 3
+#define CONFIG_USE_BOOTCOMMAND
+#define CONFIG_BOOTCOMMAND                      "echo Flag Status: Update=${updateFlag};"\
+                                                "if ${updateFlag}; "\
+                                                "then "\
+                                                        "if dhcp && ping ${serverip} && tftpboot 0x01000000 /srv/tftp/bootscript.%bootscript_name.img; "\
+                                                        "then "\
+                                                                "source 0x01000000; "\
+                                                                "echo Software Update Successful; "\
+                                                        "else "\
+                                                                "echo Software Update Failed; "\
+                                                        "fi; "\
+                                                "else "\
+                                                        "if sf probe; run boot_image; "\
+                                                        "then "\
+                                                                "echo Software Boot from Flash Successfull; "\
+                                                        "else "\
+                                                                "echo Software Boot from Flash Failed; "\
+                                                        "fi; "\
+                                                "fi;"
+
+// Version string
+#define CONFIG_PREBOOT                          "echo; echo U-Boot for lab-setup; echo => hap-fpga-images @ git-ref-placeholder; echo => lane: lane-placeholder; echo;"
+
+// Server ip presetting
+#undef CONFIG_SERVERIP
+
+// Allow autonegotiation to take longer
+#define PHY_ANEG_TIMEOUT                        15000
+
+// Additional environment variables may be appended here
+/* Extra U-Boot Env settings */
+#define CONFIG_EXTRA_ENV_SETTINGS \
+	SERIAL_MULTI \ 
+	CONSOLE_ARG \ 
+	PSSERIAL0 \ 
+	"nc=setenv stdout nc;setenv stdin nc;\0" \
+   "ethaddr=%mac_addr\0" \
+   "ipaddr=\0" \
+   "serverip=%server_ip\0" \
+	"autoload=no\0" \ 
+	"sdbootdev=0\0" \ 
+	"clobstart=0x10000000\0" \ 
+	"netstart=0x10000000\0" \ 
+	"dtbnetstart=0x23fff000\0" \ 
+	"loadaddr=0x10000000\0" \ 
+	"bootsize=0x500000\0" \ 
+	"bootstart=0x0\0" \ 
+	"boot_img=BOOT.BIN\0" \ 
+	"load_boot=tftpboot ${clobstart} ${boot_img}\0" \ 
+	"update_boot=setenv img boot; setenv psize ${bootsize}; setenv installcmd \"install_boot\"; run load_boot test_img; setenv img; setenv psize; setenv installcmd\0" \ 
+	"install_boot=sf probe 0 && sf erase ${bootstart} ${bootsize} && " \ 
+		"sf write ${clobstart} ${bootstart} ${filesize}\0" \ 
+	"bootenvsize=0x20000\0" \ 
+	"bootenvstart=0x500000\0" \ 
+	"eraseenv=sf probe 0 && sf erase ${bootenvstart} ${bootenvsize}\0" \ 
+	"jffs2_img=rootfs.jffs2\0" \ 
+	"load_jffs2=tftpboot ${clobstart} ${jffs2_img}\0" \ 
+	"update_jffs2=setenv img jffs2; setenv psize ${jffs2size}; setenv installcmd \"install_jffs2\"; run load_jffs2 test_img; setenv img; setenv psize; setenv installcmd\0" \ 
+	"install_jffs2=sf probe 0 && sf erase ${jffs2start} ${jffs2size} && " \  
+		"sf write ${clobstart} ${jffs2start} ${filesize}\0" \ 
+	"kernelsize=0xa80000\0" \ 
+	"kernelstart=0x520000\0" \ 
+	"kernel_img=image.ub\0" \ 
+	"load_kernel=tftpboot ${clobstart} ${kernel_img}\0" \ 
+	"update_kernel=setenv img kernel; setenv psize ${kernelsize}; setenv installcmd \"install_kernel\"; run load_kernel test_crc; setenv img; setenv psize; setenv installcmd\0" \ 
+	"install_kernel=sf probe 0 && sf erase ${kernelstart} ${kernelsize} && " \ 
+		"sf write ${clobstart} ${kernelstart} ${filesize}\0" \ 
+	"cp_kernel2ram=sf probe 0 && sf read ${netstart} ${kernelstart} ${kernelsize}\0" \ 
+	"dtb_img=system.dtb\0" \ 
+	"load_dtb=tftpboot ${clobstart} ${dtb_img}\0" \ 
+	"update_dtb=setenv img dtb; setenv psize ${dtbsize}; setenv installcmd \"install_dtb\"; run load_dtb test_img; setenv img; setenv psize; setenv installcmd\0" \ 
+	"fault=echo ${img} image size is greater than allocated place - partition ${img} is NOT UPDATED\0" \ 
+	"test_crc=if imi ${clobstart}; then run test_img; else echo ${img} Bad CRC - ${img} is NOT UPDATED; fi\0" \ 
+	"test_img=setenv var \"if test ${filesize} -gt ${psize}\\; then run fault\\; else run ${installcmd}\\; fi\"; run var; setenv var\0" \ 
+	"netboot=tftpboot ${netstart} ${kernel_img} && bootm\0" \ 
+	"default_bootcmd=run cp_kernel2ram && bootm ${netstart}\0" \ 
+	"updateFlag=true\0" \
+	"updateFlag_switch=if ${updateFlag}; " \
+		"then setenv updateFlag false; setenv bootdelay 0; " \
+		"else setenv updateFlag true; setenv bootdelay 3; fi; " \
+		"saveenv; echo Set update flag to ${updateFlag}\0" \
+""
